name: Setup Ubuntu with Composer and PHP
on:
  push:
    tags:
      - '*'

jobs:
  setup-ubuntu:
    runs-on: ubuntu-20.04

    steps:
      - name: Check for GitHub API key
        if: ${{ github.event_name == 'push' }}
        env:
          GITHUB_TOKEN: ${{ secrets.MY_GITHUB_TOKEN }}
        run: |
          if [ -z "${GITHUB_TOKEN}" ]; then
            echo "GitHub API key not found. Exiting..."
            exit 0
          else
            echo "GitHub API key found."
          fi

      - name: Updating Dependencies + zip
        run: |
          cd ~
          curl -sS https://getcomposer.org/installer -o /tmp/composer-setup.php
          HASH=`curl -sS https://composer.github.io/installer.sig`
          sudo php /tmp/composer-setup.php --install-dir=/usr/local/bin --filename=composer

          sudo update-alternatives --set php /usr/bin/php8.1

          cd /tmp
          mkdir linkstack
          cd linkstack

          TAG_VERSION="${GITHUB_REF##*/}"
          version=${TAG_VERSION#"v"}

          echo "$version" > version.json

          git clone -b beta https://github.com/LinkStackOrg/LinkStack/

          mkdir linkstack
          mv LinkStack linkstack/linkstack

          cd linkstack

          curl -o README.md https://gist.githubusercontent.com/JulianPrieber/7a3f18a404c524d59c147a8d4f1ad33c/raw/3008f0893da2effaee56b99ee8b956fa533d9b07/README.md

          cd linkstack

          cp "../../version.json" "version.json"
          
          composer update --no-scripts

          php artisan lang:update
          
          php artisan migrate
          php artisan db:seed
          php artisan db:seed --class="PageSeeder"
          php artisan db:seed --class="ButtonSeeder"

          composer update --no-dev --no-scripts
          
          rm -r ".git"
          rm -r ".github"
          rm README.md
          cd ../../
          
          rsync -av linkstack/linkstack update

          cd update
          
          mv linkstack/database/database.sqlite database.sqlite

          curl -o "HOW TO UPDATE.md" https://gist.githubusercontent.com/JulianPrieber/afc782666cf8c8f7a1a9cb9928498af5/raw/dbbbefb3c88ecd7703efbc866209629d9d130659/HOW%2520TO%2520UPDATE.md

          rm linkstack/INSTALLING

          cd ..

          rsync -av linkstack/linkstack/ "$version"
          
          rm "$version/.env"
          rm "$version/INSTALLING"
          rm "$version/database/database.sqlite"
          cp version.json "$version/version.json"
          echo "v$version" > "$version/vbeta.json"

          touch /tmp/linkstack/linkstack/linkstack/storage/app/ISINSTALLED

          cd /tmp/linkstack
          
          cd "$version"
          zip -r "$version.zip" *
          mv "$version.zip" ../
          cd .. 

          cd linkstack
          zip -r "linkstack.zip" *
          mv linkstack.zip ../
          cd .. 

          cd update
          zip -r "update.zip" *
          mv update.zip ../
          cd ..

      - name: Create GitHub Release
        if: ${{ github.event_name == 'push' }}
        env:
          GITHUB_TOKEN: ${{ secrets.MY_GITHUB_TOKEN }}
        run: |
          if [ -z "${GITHUB_TOKEN}" ]; then
            echo "GitHub API key not found. Exiting..."
            exit 1
          else
            echo "GitHub API key found."
            cd /tmp/linkstack

            # Get the repository name in the format 'OWNER/REPO'
            REPO_NAME="JulianPrieber/php82test"

            # Upload 'update.zip'
            gh release upload "${GITHUB_REF##*/}" "update.zip" --clobber -R "$REPO_NAME"

            # Upload 'linkstack.zip'
            gh release upload "${GITHUB_REF##*/}" "linkstack.zip" --clobber -R "$REPO_NAME"

            # Mark the release as the latest
            gh release edit "${GITHUB_REF##*/}" --title="${GITHUB_REF##*/}" -R "$REPO_NAME"
          fi

      - name: Setup Docker
        run: |
          sudo apt-get update
          sudo apt-get install -y docker.io

      - name: Build Docker Image
        if: ${{ github.event_name == 'push' }}
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_ACCESS_TOKEN: ${{ secrets.DOCKER_ACCESS_TOKEN }}
        run: |
          echo $DOCKER_ACCESS_TOKEN | sudo docker login -u $DOCKER_USERNAME --password-stdin

          # Set up the Docker image name and version
          IMAGE_NAME=julianprieber/test
          VERSION=latest

          setx DOCKER_BUILDKIT 1
          setx COMPOSE_DOCKER_CLI_BUILD 1

          # Enable experimental features for Docker CLI
          export DOCKER_CLI_EXPERIMENTAL=enabled

          # Create and use a new Buildx builder instance
          docker buildx create --name mybuilder --use
          docker buildx inspect mybuilder --bootstrap

          # Pull the LinkStack-docker repository
          git clone https://github.com/LinkStackOrg/LinkStack-docker.git /tmp/linkstack-docker

          # Navigate to the linkstack-docker folder
          cd /tmp/linkstack-docker

          # Remove the existing linkstack folder and paste the updated files from the previous steps
          rm -rf linkstack
          
          # Copy the contents from the linkstack folder (generated from the Updating Dependencies + zip step)
          cp -r /tmp/linkstack/linkstack linkstack

          # Build the Docker image for multiple architectures and push to Docker Hub
          docker buildx build \
            --platform linux/amd64,linux/arm/v6,linux/arm/v7,linux/arm64 \
            --tag $IMAGE_NAME:$VERSION \
            --push .